{##
 # test_entry_alpha_numeric_transcribe.twig
 #
 # Transcribe a alpha_numeric type test.
 # @author Dean Inglis <inglisd@mcmaster.ca>
 # @see base_view.twig for parameters
 #}
{% extends "widget.twig" %}

{% block javascript %}

  {{ parent() }}

  <script type="text/javascript">

    var table_selector = "#{{ widget.full }}__entry_table";

    function configure_ui() {

      // disable elements based on deferred status
      if( {{ deferred }} || !{{ editable }} ) {
        $( "#{{ parent.full }}__audio_status" ).prop( "disabled", true );
        $( "#{{ parent.full }}__participant_status" ).prop( "disabled", true );
        $( "#{{ parent.full }}_defer" ).button( { disabled :  true } );
        $( "#{{ parent.full }}_reset" ).button( { disabled : true } );
        $( "#{{ widget.full }}_add" ).button( { disabled : true } );
        $( table_selector + " input:text" ).each( function() {
          $(this).prop( "disabled", true );
        } );
      } else {
        // count the number of inputs, how many have text in them and which is the last
        // non-disabled entry
        var numFilled = 0;
        var numInput = 0;
        var lastEmpty = null;
        var numEmptyAdded = 0;
        var has_null_status =
          'NULL' == "{{ audio_status }}" && 'NULL' == "{{ participant_status }}";

        $( table_selector + " input:text" ).each( function() {
          if( 0 < $(this).val().length ) {
            numFilled++;
          } else {
            if( !$(this).prop( "disabled" ) ) lastEmpty = $(this);
            if( $(this).parent().hasClass( "added" ) ) numEmptyAdded++;
          }
          numInput++;
        } );

        // only enable the next button when there is at least one entry filled
        // additionally, disable if there are any empty added fields
        $( "#{{ parent.full }}_next" ).button( { disabled : ( has_null_status && 0 == numFilled ) || 0 < numEmptyAdded } );

        // disable the Reset button if there is nothing to reset
        $( "#{{ parent.full }}_reset" ).button( { disabled : has_null_status && 0 == numFilled } );

        // only enable the add button when all inputs are filled
        $( "#{{ widget.full }}_add" ).button( { disabled : numFilled != numInput } );

        if( null !== lastEmpty && numFilled != numInput ) {
          lastEmpty.focus();
        } else {
          $( table_selector + " input:text" ).last().blur();
        }

        if( 'unavailable' == "{{ audio_status }}" || 'unusable' == "{{ audio_status }}" ||
            'refused' == "{{ participant_status }}" ) {
          $( table_selector + " input" ).each( function() {
            $(this).prop( "disabled", true );
          } );
        }
      }
    }

    function update_input_list() {

      $( table_selector + ' input:text' ).change( function() {

        var candidate = $(this).val().trim().toLowerCase();
        // we've trimmed and lower-cased the candidate, so update the UI
        $(this).val( candidate );
        // update the value to present state
        $(this).attr( "value", candidate );
        if( 0 == candidate.length ) {
          alert( "Blank entries are not permitted" );
          configure_ui();
          return false;
        }
        var args = new Object();
        var columns = new Object();
        args.id = $(this).prop("id").split("__")[0];
        // test if this is from an Added text input
        // if it is, the subject's edit class will use the uniqueness of
        // test_entry_id and rank to find the record to edit
        var rank = parseInt( $(this).prop( "id" ).split( "__" )[1] );
        if( 0 == args.id ) {
          args.id = "";
          columns["rank"] = rank;
          columns["test_entry_id"] = {{ parent.id }};
        }
        columns["word_candidate"] = candidate;
        args.columns = columns;

        // push the edits
        if( ajax_push( "{{ widget.subject }}", "edit", args ) ) {

          // enable the next empty input
          var next_rank_id = "__" + ( rank + 1 );
          $( table_selector + ' input:text[id$="' + next_rank_id + '"]' ).prop( "disabled", false );

          configure_ui();
        } else {
          alert( "Entry was not accepted, try again." );
          // clear the text entry and re-focus
          $(this).val( "" );
          $(this).attr( "value", "" );
          $(this).focus();
        }
      } );// end text input change

    }// end function update_input_list

    $( function () {

      update_input_list();
      configure_ui();

      $( "#{{ widget.full }}_add" ).button( {
        text: false,
        icons: { primary: "ui-icon-plusthick" }
        } )
      .click( function() {
        // add a text input to the end of the table one row before the
        // one containing the Add button
        $td_selector = $( table_selector + " td" ).not( '.button' );
        var rank = $td_selector.length + 1;
        var html = '<td class="added"><input type="text" style="width:20%" id="0__' +
          rank + '"/></td>';
        // the number of entries in a typical row
        var maxTd = $( table_selector + " tr:first td" ).length;

        // the number of entries in the target row
        var targetRow = $( table_selector + " tr" ).length - 1;
        var numTd = $( table_selector + " tr:nth-child(" + targetRow + ") td" ).length;

        // add a new table row if required
        if( numTd == maxTd ) {
          html = '<tr class="added">' + html + "</tr>";
          $( table_selector + ' tr:last' ).before( html );
        } else {
          $( table_selector + ' tr:last' ).prev().append( html );
        }

        // create a new alpha numeric test entry
        var args = new Object();
        var columns =  new Object();
        columns["test_entry_id"] = {{ parent.id }};
        args.columns = columns;
        if( ajax_push( "{{ widget.subject }}", "new", args ) ) {
          update_input_list();
          configure_ui();
        }
      } );// end Add button click

    } );
  </script>

{% endblock javascript %}

{% block widget %}

  <div class="spacer"></div>

  <table id="{{ widget.full }}__entry_table">

    <tbody>

    {% set numcell = 10 %}
    {% set kprev = 'true' %}
    {% set imax = entry_data|length-1 %}
    {% if numcell > imax %}
      {% set numcell = imax %}
    {% endif %}

    {% for i in range(0, imax, numcell) %}
      <tr>
      {% set kmax = i+numcell-1 %}
      {% if kmax > imax %}
        {% set kmax = imax %}
      {% endif %}
      {% for k in i..kmax %}

        {% set value = '' %}
        {% if entry_data[k].word_id is defined %}
          {% set value = entry_data[k].word %}
        {% endif %}
        {% set status = entry_data[k].word_id ? "word" : "empty" %}

          <td>
            <input type="text"
             style="width:20%"
             id="{{ entry_data[ k ].id }}__{{ entry_data[ k ].rank }}"

             {% if editable == 0  %}
               { readonly }
             {% endif %}
             {% if status == 'empty'  %}
               {% if kprev == 'false' %}
                 { disabled }
               {% endif %}
               {% set kprev = 'false' %}
             {% elseif status == 'word' %}
               {% set kprev = 'true' %}
             {% endif %}

             value="{{ value }}"/>
          </td>

        {% endfor %}

      </tr>

    {% endfor %}

      {% if editable == 1 %}
      <tr>
        <td colspan="{{ numcell }}" class="button">
          <button class="{{ widget.full }}__add_entry"
            style="float:right"
            disabled
            id="{{ widget.full }}_add">Add</button>
        </td>
      </tr>
      {% endif %}

    </tbody>
  </table>

{% endblock widget %}

