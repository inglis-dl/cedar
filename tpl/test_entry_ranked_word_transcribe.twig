{##
 # test_entry_ranked_word_transcribe.twig
 #
 # Transcribe a ranked word test.
 # @author Dean Inglis <inglisd@mcmaster.ca>
 # @see base_view.twig for parameters
 #}
{% extends "widget.twig" %}

{% block javascript %}

  {{ parent() }}

  <script type="text/javascript">

    var table_selector = "#{{ widget.full }}__entry_table";

    function configure_ui( do_text ) {

      if( {{ deferred }} || !{{ editable }} ) {
        $( "#{{ parent.full }}_defer" ).button( { disabled :  true } );
        $( "#{{ parent.full }}_reset" ).button( { disabled : true } );
        $( "#{{ widget.full }}_add" ).button( { disabled : true } );
        $( table_selector + " input" ).each( function() {
          $(this).prop( "disabled", true );
        } );
      } else {
        var numRadio = $( table_selector + ' input:radio' ).length / 3;
        var numYes = $( table_selector + ' input:radio[value="yes"]:checked' ).length;
        var numNo = $( table_selector + ' input:radio[value="no"]:checked' ).length;
        var numVariant = $( table_selector + ' input:radio[value="variant"]:checked' ).length;
        var numEmptyIntrusion = $( table_selector + ' input:text[id$="intrusion"][value=""]' ).length;
        var has_null_status = 'NULL' == "{{ audio_status }}" && 'NULL' == "{{ participant_status }}";

        // count number of items with value "yes"
        // count number of items with value "no"
        // count number of items with value "variant"
        // total yes + no + variant == total radio / 3 => enable next button

        // disable the next and add buttons if the ranked word entries are incomplete
        // or if there are empty intrusion fields
        var disable = ( ( numYes + numNo + numVariant ) != numRadio && has_null_status ) || 0 < numEmptyIntrusion;
        $( "#{{ parent.full }}_next" ).button( { disabled : disable } );
        $( "#{{ widget.full }}_add" ).button( { disabled : disable } );

        // disable the reset button if there is nothing to reset
        $( "#{{ parent.full }}_reset" ).button(
          { disabled : 0 == numYes && 0 == numNo && 0 == numVariant && has_null_status } );

        do_text = (typeof do_text == 'undefined') ? true : do_text;
        if( do_text ) {
          // if no radio items are checked, disable all text inputs
          $( table_selector + " input:text" ).each( function() {
              var disable = false;
              if( 0 == numYes && 0 == numNo && 0 == numVariant ) {
                disable = true;
              }
              else {
                if( $(this).prop( "id" ).split( "__" )[1] === "candidate" ) {
                  var id = "#" + $(this).prop( "id" ).replace( "candidate", "variant" );
                  disable = !$( id ).prop( "checked" );
                }
              }
              $(this).prop( "disabled", disable );
          } );
        }

        if( 'unavailable' == "{{ audio_status }}" || 'unusable' == "{{ audio_status }}" ||
            'refused' == "{{ participant_status }}" ) {
          $( table_selector + " input" ).each( function() {
            $(this).prop( "disabled", true );
          } );
        }
      }
    }

    // overrides the default autocomplete filter function to search only from the beginning
    // of the string
    $.ui.autocomplete.filter = function ( array, term ) {
      var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( term ), "i" );
      return $.grep( array, function ( value ) {
        return matcher.test( value.label || value.value || value );
      } );
    };

    function get_variant_text_complete() {
      var args = new Object();
      args["variant_dictionary_id"] = {{ variant_dictionary_id }};
      args["language_id"] = {{ language_id }};
      args["words_only"] = 1;
      return ajax_pull( "word", "list", args );
    }

    function get_intrusion_text_complete() {
      var args = new Object();
      args["intrusion_dictionary_id"] = {{ intrusion_dictionary_id }};
      args["language_id"] = {{ language_id }};
      args["words_only"] = 1;
      return ajax_pull( "word", "list", args );
    }

    function update_input_list() {

      $( table_selector + ' input:text[id$="candidate"]' ).autocomplete( {
        source: get_variant_text_complete(),
        minLength: 1,
        select: function( event, ui ) {
          $(this).val( ui.item.value );
          $(this).attr( "value", ui.item.value );
          }
        } );

      $( table_selector + ' input:text[id$="intrusion"]' ).autocomplete( {
        source: get_intrusion_text_complete(),
        minLength: 1,
        select: function( event, ui ) {
          $(this).val( ui.item.value );
          $(this).attr( "value", ui.item.value );
          }
        } );

      $( table_selector + ' input:text' ).change( function() {
        var candidate = $(this).val().trim().toLowerCase();
        // we've trimmed and lower-cased the candidate, so update the UI
        $(this).val( candidate );
        // update the value to present state
        $(this).attr( "value", candidate );
        $(this).removeClass( "candidate primary intrusion variant" );
        if( 0 == candidate.length ) {
          alert( "Blank entries are not permitted" );
          configure_ui();
        } else {
          var args = new Object();
          var columns = new Object();
          args.id = $(this).prop( "id" ).split( "__" )[0];
          var is_variant = $(this).prop( "id" ).split( "__" )[1] === "candidate";
          columns["word_candidate"] = candidate;
          if( is_variant ) {
            columns["selection"] = "variant";
            columns["ranked_word_set_id"] = $(this).prop( "name" );
          }
          args.columns = columns;

          // push edits
          if( ajax_push( "{{ widget.subject }}", "edit", args ) ) {

            // determine what type of word this is
            args.id = {{ test_id }};
            args["language_id"] = {{ language_id }};
            args["word_candidate"] = candidate;
            var classification = ajax_pull( "test", "classify_word", args );
            if( undefined != classification ) {
               $(this).addClass( classification );
              // if an intrusion, check and add the word if not in the autocomplete source
              if( classification == 'intrusion' ) {
                var text_selector = $( table_selector + ' input:text[id$="intrusion"]' );
                var source = text_selector.autocomplete( "option", "source" );
                if( -1 == $.inArray( candidate, source ) ) {
                  source.push( candidate );
                  source.sort();
                  text_selector.autocomplete( "option", "source", source );
                }
              }
            }

            // re-enable all radio and variant text inputs
            $( table_selector + " input:radio" ).each( function() {
              $(this).prop( "disabled", false );
              if( $(this).val() === "variant" ) {
                var text_id = table_selector + ' input:text[id="' +
                  $(this).prop( "id" ).replace( "variant", "candidate" ) + '"]';
                if( 0 < $( text_id ).val().length ) {
                  $( text_id ).prop( "disabled", false );
                }
              }
            } );

            configure_ui();

          } else {
            $(this).val( "" );
            $(this).attr( "value", "" );
            // re-enable all radio and variant text inputs
            $( table_selector + " input:radio" ).each( function() {
              $(this).prop( "disabled", false );
              if( $(this).val() === "variant" ) {
                var text_id = table_selector + ' input:text[id="' +
                  $(this).prop( "id" ).replace( "variant", "candidate" ) + '"]';
                if( 0 < $( text_id ).val().length ) {
                  $( text_id ).prop( "disabled", false );
                }
              }
            } );
            var radio_id = table_selector + ' input:radio[id="' + args.id + '__no"]';
            $( radio_id ).focus();
            $( radio_id ).prop( "checked", true );
            $( radio_id ).change();
          }
        }
      } );// end text input change
    }

    $( function () {

      update_input_list();
      configure_ui();

      // note that only non-strict tests can have new entries added for intrusions
      $( "#{{ widget.full }}_add" ).button( {
        text: false,
        icons: { primary: "ui-icon-plusthick" }
        } )
      .click( function() {
        var args = new Object();
        var columns =  new Object();
        columns["test_entry_id"] = {{ parent.id }};
        args.columns = columns;
        if( ajax_push( "{{ widget.subject }}", "new", args ) ) {
          slot_refresh( {{ slot }} );
        }
      } ); // end Add button click

      // find and handle radio element change events:
      // enable/disable the text entry element depending on
      // which radio button was selected
      $( table_selector + " input:radio" ).change( function() {
        var args = new Object();
        var columns = new Object();
        var selection = $(this).val();
        args.id = $(this).prop( "id" ).split("__")[0];
        columns["selection"] = selection;
        if( selection !== "variant" ) {
          columns["word_candidate"] = '';
        }
        args.columns = columns;
        var do_text = true;
        if( ajax_push( "{{ widget.subject }}", "edit", args ) ) {
          var text_id =
            table_selector + ' input:text[id="' + args.id + '__candidate"]';
          $( text_id ).removeClass( "candidate primary intrusion variant" );
          if( selection === "variant" ) {
            // disable inputs until the variant is entered
            $( table_selector + " input" ).prop( "disabled", true );
            $( text_id ).prop( "disabled", false );
            $( text_id ).focus();
            do_text = false;
          } else {
            $( text_id ).prop( "disabled", true );
            $( text_id ).val( "" );
            // update the value to present state
            $( text_id ).attr( "value", "" );
          }
        }

        configure_ui( do_text );
      } );// end radio input change
    } );
  </script>

{% endblock javascript %}

{% block widget %}

  <div class="spacer"></div>

  <table id="{{ widget.full }}__entry_table">

    <thead>
      <tr>
        <td></td>
        <th>Yes</th>
        <th>No</th>
        <th>Variant</th>
        <td></td>
      </tr>
    </thead>

    <tbody>
    {% for entry in entry_data %}

        {% if entry.ranked_word_set_word is defined %}
        <tr class="ranked_word">
          <td class="heading">{{ entry.ranked_word_set_word }}</td>
          <td><input type="radio"
               id="{{ entry.id }}__yes"
               name="{{ entry.ranked_word_set_id }}"
               value="yes"
               {% if editable == 0 %}
                 { readonly }
               {% endif %}
               {{ entry.selection == 'yes' ? "checked" : "" }}/></td>
          <td><input type="radio"
               id="{{ entry.id }}__no"
               name="{{ entry.ranked_word_set_id }}"
               value="no"
               {% if editable == 0 %}
                 { readonly }
               {% endif %}
               {{ entry.selection == 'no' ? "checked" : "" }}/></td>
          <td><input type="radio"
               id="{{ entry.id }}__variant"
               name="{{ entry.ranked_word_set_id }}"
               value="variant"
               {% if editable == 0 %}
                 { readonly }
               {% endif %}
               {{ entry.selection == 'variant' ? "checked" : "" }}/></td>
          <td><input type="text"
               id="{{ entry.id }}__candidate"
               name="{{ entry.ranked_word_set_id }}"
               {% if editable == 0 %}
                 { readonly }
               {% endif %}
               {% if entry.word is defined %}
                 value="{{ entry.word }}"
                 {% if entry.classification is defined %}
                   class="{{ entry.classification }}"
                 {% endif %}
               {% else %}
                 { disabled }
               {% endif %}/></td>
        </tr>
        {% else %}
        <tr class="intrusion">
          <td class="heading">INTRUSION</td>
          <td></td><td></td><td></td>
          <td><input type="text"
               id="{{ entry.id }}__intrusion"
               {% if editable == 0 %}
                 { readonly }
               {% endif %}
               {% if entry.word is defined %}
                 value="{{ entry.word }}"
                 {% if entry.classification is defined %}
                   class="{{ entry.classification }}"
                 {% endif %}
               {% endif %}/></td>
         </tr>
        {% endif %}
    {% endfor %}

      {% if editable == 1 %}
      <tr>
        <td colspan="5" class="button">
            <button class="{{ widget.full }}__add_entry"
              style="float:right"
              disabled
              id="{{ widget.full }}_add">Add</button>
         </td>
      </tr>
      {% endif %}

    </tbody>
  </table>

  <div id="{{ widget.full }}__variant_dialog"></div>

{% endblock widget %}
