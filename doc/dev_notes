design of cenozo based application - general

- design database in mysql workbench

- open sabretooth's .mwb file and  remove non-essential sabretooth tables as required
to create a template .mwb file for your app

- import your app's db design.sql into the template and edit as required

- export forward engineer, filtering out all cenozo table objects,
turn off views and triggers as required to schema.sql

- to get the app to run during development, there must be the following databases:
name_myapp
name_beartooth
name_cenozo
name_mastodon
name_sabretooth
name_sabretooth_mc
name_limesurvey
name_limesurvey2

- create db in mysql:
create database name_myapp character set utf8;
grant all on name_myapp.* to 'name'@'localhost';

- create all the other 'name_*' dbs listed above

- run the "load" script in /home/?/files/data/db to preload data into all the 
listed db's

- import the schema.sql into mysql:
sed -e "s/\`\(myapp\|cenozo\)\`/\`name_\1\`/g" schema.sql | mysql name_app

- import the cenozo operations from cenozo/sql/operations.sql
mysql name_myapp < path_to_cenozo_sql/operations.sql

- import the customized cenozo/sql/operations.sql from myapp/sql into name_app db:
mysql name_myapp < operations.sql

- setup myapp/web/settings.ini.php

- setup myapp/web/settings.local.ini.php from a copy of settings.local.ini.php.sample

- in cenozo/app create the settings.local.ini.php

- create roles for myapp db using a customized copy of cenozo/sql/roles.sql

- use sed to change the default name of myapp and cenozo db's as required:
sed -e "s/\(myapp\|cenozo\)/name_\1/g" roles.sql | mysql name_myapp

- log into mastodon, add a service with name="myapp", title="MyApp"
Version="0.1.0" or whatever version is in myapp/web/settings.ini.php

- view details about service "myapp" , add cohorts to Cohort list (tracking, comprehensive) use regional,
set Release Based  to false (no),
and Role List entries (administrator, typist)

- create a site in Mastodon: eg., McMaster (myapp)

- add an administrator level user (and other roles as required) to User List in Mastodon

- it may be required to first create the admin user in cenozo:
insert into access( user_id, role_id, site_id )
select user.id, role.id, site.id
from user, role, site
here user.name = "dean" ********* or user user.name IN (list of names)
and role.name = "administrator"
and site.name = "mcmaster"
and site.service_id = ( select id from service where name = "sabretooth" )

- in the site list view, choose users to grant access to the new site along with roles

- create a cedar instance in Sabretooth with credentials as defined in
cedar's web/settings.local.ini.php

- create base classes for all tables in myapp db that have a primary id column
(use cenozo/api/database/event.class.php as a stub)

- when updating twig files that are cached on the live cati server:
sudo rm -rf /tmp/cenozo/usr/local/lib/cedar-*/template/*

- when updating php files that are cached on the live cati server, run the following:
 sudo apache2ctl -k graceful
 so that updates are accounted for safely

- create a symbolic link public_html in your root user directory
- create symbolic links to cenozo and your app's repository web folders
- create the log file in the root of your app's repository: touch log, chmod 666 log
- for testing, release participants from name_cenozo with
insert into service_has_participant (service_id, participant_id, datetime) select service.id, participant.id, utc_timestamp() from service, participant where service.name='cedar';

debugging tips
- in php source files, use log::debug( $var );
- for db debugging, in php source files, bracket the code of interest with:
\cenozo\database\database::$debug=true;
\cenozo\database\database::$debug=false;

git management

- if it is necessary to update qa and develop, then pull from release to qa 
and from release to develop.  However, if the code is in a state where there 
is no qa release ready for testing and you're not actively developing, commit 
the fix in release and that's all.  Then, once you start developing again, 
pull from release to develop to make sure you have all hot-fixes before 
continuing development.  You never have to pull into qa unless there is an 
active qa branch which is being tested.

- when you fix bugs in qa do not pull them back into develop.  Instead, wait 
until all the bugs are fixed and you merge into release, then you can pull from 
release back into development (when you're ready to proceed with new development)

